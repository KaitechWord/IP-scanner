import socket
import ipaddress
from collections import defaultdict

import paramiko
import requests
import pickle
import asyncio


def scan_ip(ip):
    try:
        socket.gethostbyaddr(str(ip))
    except socket.herror:
        return False, None
    except socket.gaierror:
        return False, None

    client = paramiko.SSHClient()
    try:
        client.connect(ip)
    except Exception:
        return True, None
    client.close()
    return True, client.get_transport().get_remote_server_key().get_base64()

def scan_ipv6_net(net: ipaddress.IPv6Network):
    size = net.num_addresses
    start = net.network_address
    step = size >> 8 if size < 2 ** 24 else 2 ** 16
    current = start
    while current < start + size:
        result = scan_ip(current)
        yield (current, *result)
        if result[0]:
            pass
            # TODO

        current += step


def scan_asn(asn, ips):
    if "ipv4" in ips:
        for ipv4 in ips["ipv4"]:
            net = ipaddress.IPv4Network(ipv4)
            for ip in net:
                present, fingerprint = scan_ip(ip)
                if present:
                    print(f"Host {ip} is present")
                    if fingerprint:
                        print(f"Host {ip} has fingerprint {fingerprint}")
                if present:
                    yield "ipv4", ip, present, fingerprint
    print(f"IPv4 scan for {asn} done")
    if "ipv6" in ips:
        for ipv6 in ips["ipv6"]:
            net = ipaddress.IPv6Network(ipv6)
            for ip, present, fingerprint in scan_ipv6_net(net):
                if present:
                    print(f"Host {ip} is present")
                    if fingerprint:
                        print(f"Host {ip} has fingerprint {fingerprint}")
                    yield "ipv4", ip, present, fingerprint



def main():
    with open('addrs.pickle', 'rb') as f:
        addrs = pickle.load(f)
    try:
        with open("fingerprints.pickle", 'rb') as f:
            asn_last, fingerprints, presence = pickle.load(f)
    except FileNotFoundError:
        fingerprints = {"ipv4": defaultdict(list), "ipv6": defaultdict(list)}
        presence = {"ipv4": [], "ipv6": []}
        asn_last = None

    last_found = asn_last is None

    for asn, ips in addrs.items():
        if not last_found:
            if asn == asn_last:
                last_found = True
            continue
        for type, ip, present, fingerprint in scan_asn(asn, ips):
            if fingerprint:
                fingerprints[type][fingerprint].append(ip)
            if present:
                presence[type].append(ip)
        with open('fingerprints.pickle', 'wb') as f:
            pickle.dump((asn, dict(fingerprints), dict(presence)), f)



if __name__ == "__main__":
    main()
